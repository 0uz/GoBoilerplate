services:
  app:
    build: .
    container_name: goauthboiler
    ports:
      - "8080:8080"
    depends_on:
      valkey:
        condition: service_healthy
      pgdb:
        condition: service_healthy
    environment:
      APP_ENV: PROD
      DB_PORT: ${PORT}
      V1_PREFIX: ${V1_PREFIX}
      PG_DB_HOST: pgdb
      PG_DB_USER: ${PG_DB_USER}
      PG_DB_PASSWORD: ${PG_DB_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_DB_PORT: ${PG_DB_PORT}
      VALKEY_HOST: valkey
      VALKEY_PORT: ${VALKEY_PORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ready"]
      interval: 1s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - ./logs:/var/log
    networks:
      - app-network

  pgdb:
    image: postgres:latest
    user: postgres
    container_name: goauthboiler-postgres
    environment:
      POSTGRES_USER: ${PG_DB_USER}
      POSTGRES_PASSWORD: ${PG_DB_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
    ports:
      - "${PG_DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/1-init.sql:/docker-entrypoint-initdb.d/1-init.sql
    healthcheck:
      test: "pg_isready -d ${PG_DB_NAME} -U ${PG_DB_USER}"
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  valkey:
    image: valkey/valkey:latest
    container_name: goauthboiler-valkey
    ports:
      - "${VALKEY_PORT}:6379"
    command: valkey-server
    volumes:
      - valkey-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
  valkey-data:

networks:
  app-network:
    driver: bridge